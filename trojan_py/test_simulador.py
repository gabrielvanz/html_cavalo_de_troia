#!/usr/bin/env python3
"""
Script de Teste - Simulador Educacional de Cavalo de Tr√≥ia
==========================================================

Este script testa todas as funcionalidades do simulador para garantir
que est√° funcionando corretamente e de forma segura.

Autor: Equipe de Criptografia e Seguran√ßa - Atitus Educa√ß√£o
Integrantes: Diogo Chaves, Gabriel Vanz, Vitor Badin
Ano: 2024
"""

import sys
import time
import traceback
from datetime import datetime

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("üîç Testando importa√ß√µes...")
    
    try:
        from trojan_horse_simulation import TrojanSimulator, SimulationType
        print("   ‚úÖ trojan_horse_simulation importado com sucesso")
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar trojan_horse_simulation: {e}")
        return False
    
    try:
        from trojan_education_modules import TrojanEducationModules
        print("   ‚úÖ trojan_education_modules importado com sucesso")
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar trojan_education_modules: {e}")
        return False
    
    try:
        from trojan_security_analysis import TrojanSecurityAnalyzer
        print("   ‚úÖ trojan_security_analysis importado com sucesso")
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar trojan_security_analysis: {e}")
        return False
    
    return True

def test_simulator_initialization():
    """Testa inicializa√ß√£o do simulador"""
    print("\nüîß Testando inicializa√ß√£o do simulador...")
    
    try:
        from trojan_horse_simulation import TrojanSimulator
        simulator = TrojanSimulator()
        
        # Verificar propriedades de seguran√ßa
        assert simulator.sandbox_mode == True, "Modo sandbox deve estar ativo"
        assert simulator.ethical_mode == True, "Modo √©tico deve estar ativo"
        assert simulator.max_simulation_time == 300, "Tempo m√°ximo deve ser 300s"
        
        print("   ‚úÖ Simulador inicializado corretamente")
        print("   ‚úÖ Modo sandbox ativo")
        print("   ‚úÖ Modo √©tico ativo")
        print("   ‚úÖ Configura√ß√µes de seguran√ßa corretas")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro na inicializa√ß√£o: {e}")
        traceback.print_exc()
        return False

def test_education_modules():
    """Testa m√≥dulos educacionais"""
    print("\nüìö Testando m√≥dulos educacionais...")
    
    try:
        from trojan_education_modules import TrojanEducationModules
        modules = TrojanEducationModules()
        
        # Verificar se exemplos foram carregados
        assert len(modules.trojan_examples) > 0, "Deve ter exemplos de trojans"
        assert len(modules.attack_scenarios) > 0, "Deve ter cen√°rios de ataque"
        assert len(modules.defense_strategies) > 0, "Deve ter estrat√©gias de defesa"
        
        print("   ‚úÖ M√≥dulos educacionais carregados")
        print(f"   ‚úÖ {len(modules.trojan_examples)} exemplos de trojans")
        print(f"   ‚úÖ {len(modules.attack_scenarios)} cen√°rios de ataque")
        print(f"   ‚úÖ {len(modules.defense_strategies)} categorias de defesa")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro nos m√≥dulos educacionais: {e}")
        traceback.print_exc()
        return False

def test_security_analyzer():
    """Testa analisador de seguran√ßa"""
    print("\nüîç Testando analisador de seguran√ßa...")
    
    try:
        from trojan_security_analysis import TrojanSecurityAnalyzer
        analyzer = TrojanSecurityAnalyzer()
        
        # Verificar se assinaturas foram carregadas
        assert len(analyzer.signatures) > 0, "Deve ter assinaturas de malware"
        assert len(analyzer.suspicious_patterns) > 0, "Deve ter padr√µes suspeitos"
        assert len(analyzer.network_indicators) > 0, "Deve ter indicadores de rede"
        
        print("   ‚úÖ Analisador de seguran√ßa inicializado")
        print(f"   ‚úÖ {len(analyzer.signatures)} assinaturas de malware")
        print(f"   ‚úÖ {len(analyzer.suspicious_patterns)} padr√µes suspeitos")
        print(f"   ‚úÖ {len(analyzer.network_indicators)} indicadores de rede")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro no analisador de seguran√ßa: {e}")
        traceback.print_exc()
        return False

def test_simulations():
    """Testa execu√ß√£o das simula√ß√µes"""
    print("\nüéØ Testando simula√ß√µes...")
    
    try:
        from trojan_horse_simulation import TrojanSimulator, SimulationType
        simulator = TrojanSimulator()
        
        # Testar simula√ß√£o educacional
        print("   Testando simula√ß√£o educacional...")
        result = simulator.simulate_trojan_behavior(SimulationType.EDUCATIONAL)
        assert result['success'] == True, "Simula√ß√£o educacional deve ser bem-sucedida"
        assert result['execution_time'] > 0, "Tempo de execu√ß√£o deve ser positivo"
        print("   ‚úÖ Simula√ß√£o educacional funcionando")
        
        # Testar simula√ß√£o de detec√ß√£o
        print("   Testando simula√ß√£o de detec√ß√£o...")
        result = simulator.simulate_trojan_behavior(SimulationType.DETECTION)
        assert result['success'] == True, "Simula√ß√£o de detec√ß√£o deve ser bem-sucedida"
        assert 'detection_rate' in result, "Deve ter taxa de detec√ß√£o"
        print("   ‚úÖ Simula√ß√£o de detec√ß√£o funcionando")
        
        # Testar simula√ß√£o de preven√ß√£o
        print("   Testando simula√ß√£o de preven√ß√£o...")
        result = simulator.simulate_trojan_behavior(SimulationType.PREVENTION)
        assert result['success'] == True, "Simula√ß√£o de preven√ß√£o deve ser bem-sucedida"
        assert 'protection_rate' in result, "Deve ter taxa de prote√ß√£o"
        print("   ‚úÖ Simula√ß√£o de preven√ß√£o funcionando")
        
        # Testar simula√ß√£o de an√°lise
        print("   Testando simula√ß√£o de an√°lise...")
        result = simulator.simulate_trojan_behavior(SimulationType.ANALYSIS)
        assert result['success'] == True, "Simula√ß√£o de an√°lise deve ser bem-sucedida"
        assert 'threat_score' in result, "Deve ter pontua√ß√£o de amea√ßa"
        print("   ‚úÖ Simula√ß√£o de an√°lise funcionando")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro nas simula√ß√µes: {e}")
        traceback.print_exc()
        return False

def test_analysis_functions():
    """Testa fun√ß√µes de an√°lise"""
    print("\nüî¨ Testando fun√ß√µes de an√°lise...")
    
    try:
        from trojan_security_analysis import TrojanSecurityAnalyzer
        analyzer = TrojanSecurityAnalyzer()
        
        # Testar an√°lise est√°tica
        print("   Testando an√°lise est√°tica...")
        findings = analyzer.analyze_file_static("trojan_example.py")
        assert isinstance(findings, list), "Findings deve ser uma lista"
        print("   ‚úÖ An√°lise est√°tica funcionando")
        
        # Testar an√°lise de rede
        print("   Testando an√°lise de rede...")
        traffic_data = {
            "domains": ["malicious-site.com"],
            "ips": ["192.168.1.100"],
            "ports": [8080]
        }
        findings = analyzer.analyze_network_traffic(traffic_data)
        assert isinstance(findings, list), "Findings deve ser uma lista"
        print("   ‚úÖ An√°lise de rede funcionando")
        
        # Testar an√°lise comportamental
        print("   Testando an√°lise comportamental...")
        behavior_data = {
            "registry_modifications": 5,
            "files_created": 10,
            "network_connections": 3,
            "persistence_attempts": 1
        }
        findings = analyzer.analyze_behavior(behavior_data)
        assert isinstance(findings, list), "Findings deve ser uma lista"
        print("   ‚úÖ An√°lise comportamental funcionando")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro nas fun√ß√µes de an√°lise: {e}")
        traceback.print_exc()
        return False

def test_education_functions():
    """Testa fun√ß√µes educacionais"""
    print("\nüìñ Testando fun√ß√µes educacionais...")
    
    try:
        from trojan_education_modules import TrojanEducationModules
        modules = TrojanEducationModules()
        
        # Testar gera√ß√£o de quiz
        print("   Testando gera√ß√£o de quiz...")
        questions = modules.generate_educational_quiz()
        assert len(questions) > 0, "Deve ter perguntas no quiz"
        assert all('question' in q for q in questions), "Todas as perguntas devem ter 'question'"
        assert all('options' in q for q in questions), "Todas as perguntas devem ter 'options'"
        assert all('correct' in q for q in questions), "Todas as perguntas devem ter 'correct'"
        print("   ‚úÖ Gera√ß√£o de quiz funcionando")
        
        # Testar an√°lise de exemplo
        print("   Testando an√°lise de exemplo...")
        result = modules.analyze_trojan_example(0)
        assert 'name' in result, "Resultado deve ter 'name'"
        assert 'family' in result, "Resultado deve ter 'family'"
        assert 'risk_level' in result, "Resultado deve ter 'risk_level'"
        print("   ‚úÖ An√°lise de exemplo funcionando")
        
        # Testar simula√ß√£o de cen√°rio
        print("   Testando simula√ß√£o de cen√°rio...")
        result = modules.simulate_attack_scenario(0)
        assert 'scenario' in result, "Resultado deve ter 'scenario'"
        assert 'vector' in result, "Resultado deve ter 'vector'"
        print("   ‚úÖ Simula√ß√£o de cen√°rio funcionando")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro nas fun√ß√µes educacionais: {e}")
        traceback.print_exc()
        return False

def test_reports_and_export():
    """Testa gera√ß√£o de relat√≥rios e exporta√ß√£o"""
    print("\nüìä Testando relat√≥rios e exporta√ß√£o...")
    
    try:
        from trojan_horse_simulation import TrojanSimulator
        from trojan_security_analysis import TrojanSecurityAnalyzer
        
        simulator = TrojanSimulator()
        analyzer = TrojanSecurityAnalyzer()
        
        # Executar uma simula√ß√£o para gerar dados
        simulator.simulate_trojan_behavior(simulator.SimulationType.EDUCATIONAL)
        
        # Testar gera√ß√£o de relat√≥rio
        print("   Testando gera√ß√£o de relat√≥rio...")
        report = simulator.generate_security_report()
        assert isinstance(report, str), "Relat√≥rio deve ser string"
        assert len(report) > 0, "Relat√≥rio n√£o deve estar vazio"
        print("   ‚úÖ Gera√ß√£o de relat√≥rio funcionando")
        
        # Testar exporta√ß√£o de dados
        print("   Testando exporta√ß√£o de dados...")
        filename = simulator.export_simulation_data("test_simulation.json")
        assert filename.endswith('.json'), "Arquivo deve ser JSON"
        print("   ‚úÖ Exporta√ß√£o de dados funcionando")
        
        # Testar relat√≥rio de an√°lise
        print("   Testando relat√≥rio de an√°lise...")
        report = analyzer.generate_analysis_report()
        assert isinstance(report, str), "Relat√≥rio deve ser string"
        print("   ‚úÖ Relat√≥rio de an√°lise funcionando")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro nos relat√≥rios e exporta√ß√£o: {e}")
        traceback.print_exc()
        return False

def test_security_features():
    """Testa recursos de seguran√ßa"""
    print("\nüõ°Ô∏è Testando recursos de seguran√ßa...")
    
    try:
        from trojan_horse_simulation import TrojanSimulator
        simulator = TrojanSimulator()
        
        # Verificar avisos de seguran√ßa
        print("   Testando avisos de seguran√ßa...")
        simulator.display_warning()  # Deve exibir aviso sem erro
        print("   ‚úÖ Avisos de seguran√ßa funcionando")
        
        # Verificar logs de auditoria
        print("   Testando logs de auditoria...")
        assert len(simulator.security_events) >= 0, "Deve ter eventos de seguran√ßa"
        print("   ‚úÖ Logs de auditoria funcionando")
        
        # Verificar modo √©tico
        print("   Testando modo √©tico...")
        assert simulator.ethical_mode == True, "Modo √©tico deve estar ativo"
        print("   ‚úÖ Modo √©tico ativo")
        
        # Verificar modo sandbox
        print("   Testando modo sandbox...")
        assert simulator.sandbox_mode == True, "Modo sandbox deve estar ativo"
        print("   ‚úÖ Modo sandbox ativo")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erro nos recursos de seguran√ßa: {e}")
        traceback.print_exc()
        return False

def run_all_tests():
    """Executa todos os testes"""
    print("üß™ INICIANDO TESTES DO SIMULADOR EDUCACIONAL")
    print("=" * 60)
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    tests = [
        ("Importa√ß√µes", test_imports),
        ("Inicializa√ß√£o do Simulador", test_simulator_initialization),
        ("M√≥dulos Educacionais", test_education_modules),
        ("Analisador de Seguran√ßa", test_security_analyzer),
        ("Simula√ß√µes", test_simulations),
        ("Fun√ß√µes de An√°lise", test_analysis_functions),
        ("Fun√ß√µes Educacionais", test_education_functions),
        ("Relat√≥rios e Exporta√ß√£o", test_reports_and_export),
        ("Recursos de Seguran√ßa", test_security_features)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: PASSOU")
                passed += 1
            else:
                print(f"‚ùå {test_name}: FALHOU")
                failed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: ERRO - {e}")
            failed += 1
    
    print("\n" + "="*60)
    print("üìä RESULTADO DOS TESTES")
    print("="*60)
    print(f"‚úÖ Testes passaram: {passed}")
    print(f"‚ùå Testes falharam: {failed}")
    print(f"üìà Taxa de sucesso: {(passed/(passed+failed)*100):.1f}%")
    
    if failed == 0:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("   O simulador est√° funcionando corretamente e de forma segura.")
        print("   Pronto para uso educacional!")
    else:
        print(f"\n‚ö†Ô∏è  {failed} TESTE(S) FALHARAM!")
        print("   Verifique os erros acima e corrija antes de usar.")
    
    return failed == 0

def main():
    """Fun√ß√£o principal de teste"""
    try:
        success = run_all_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nüëã Testes interrompidos pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico durante os testes: {e}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
