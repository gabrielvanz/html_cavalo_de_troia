#!/usr/bin/env python3
"""
Cavalo de Tr√≥ia - Simula√ß√£o Educacional de Seguran√ßa Cibern√©tica
================================================================

Este √© um simulador educacional para demonstrar conceitos de seguran√ßa cibern√©tica
relacionados ao Cavalo de Tr√≥ia (Trojan Horse). O c√≥digo foi desenvolvido exclusivamente
para fins educacionais e de conscientiza√ß√£o sobre seguran√ßa.

IMPORTANTE: Este simulador √© destinado apenas para fins educacionais e de pesquisa
em seguran√ßa cibern√©tica. O uso malicioso de qualquer c√≥digo aqui apresentado √©
expressamente proibido e pode resultar em consequ√™ncias legais severas.

Autor: Equipe de Criptografia e Seguran√ßa - Atitus Educa√ß√£o
Integrantes: Diogo Chaves, Gabriel Vanz, Vitor Badin
Ano: 2024
"""

import os
import sys
import time
import random
import hashlib
import json
import threading
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import logging

# Configura√ß√£o de logging para auditoria
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trojan_simulation.log'),
        logging.StreamHandler()
    ]
)

class ThreatLevel(Enum):
    """N√≠veis de amea√ßa para classifica√ß√£o de simula√ß√µes"""
    LOW = "Baixo"
    MEDIUM = "M√©dio"
    HIGH = "Alto"
    CRITICAL = "Cr√≠tico"

class SimulationType(Enum):
    """Tipos de simula√ß√£o dispon√≠veis"""
    EDUCATIONAL = "Educacional"
    DETECTION = "Detec√ß√£o"
    PREVENTION = "Preven√ß√£o"
    ANALYSIS = "An√°lise"

@dataclass
class SecurityEvent:
    """Estrutura para eventos de seguran√ßa"""
    timestamp: datetime
    event_type: str
    description: str
    threat_level: ThreatLevel
    source: str
    details: Dict

class TrojanSimulator:
    """
    Simulador educacional de Cavalo de Tr√≥ia
    
    Esta classe implementa simula√ß√µes controladas e seguras para demonstrar
    conceitos de seguran√ßa cibern√©tica relacionados a trojans.
    """
    
    def __init__(self):
        self.simulation_active = False
        self.security_events: List[SecurityEvent] = []
        self.detection_systems = []
        self.prevention_measures = []
        self.simulation_log = []
        
        # Configura√ß√µes de seguran√ßa
        self.max_simulation_time = 300  # 5 minutos m√°ximo
        self.sandbox_mode = True  # Modo sandbox ativado por padr√£o
        self.ethical_mode = True  # Modo √©tico ativado
        
        # Inicializar sistemas de seguran√ßa
        self._initialize_security_systems()
        
        logging.info("Simulador de Cavalo de Tr√≥ia inicializado em modo educacional")
    
    def _initialize_security_systems(self):
        """Inicializa sistemas de seguran√ßa e preven√ß√£o"""
        self.detection_systems = [
            "Antiv√≠rus Simulado",
            "Firewall Educacional",
            "Sistema de Detec√ß√£o de Intrus√£o",
            "An√°lise Comportamental",
            "Sandbox de Seguran√ßa"
        ]
        
        self.prevention_measures = [
            "Valida√ß√£o de Entrada",
            "Criptografia de Dados",
            "Backup Autom√°tico",
            "Monitoramento de Rede",
            "Educa√ß√£o do Usu√°rio"
        ]
    
    def display_warning(self):
        """Exibe avisos de seguran√ßa e √©tica"""
        warning = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           ‚ö†Ô∏è  AVISO IMPORTANTE ‚ö†Ô∏è                            ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                                              ‚ïë
‚ïë  Este √© um SIMULADOR EDUCACIONAL para fins de conscientiza√ß√£o sobre        ‚ïë
‚ïë  seguran√ßa cibern√©tica. O uso malicioso de qualquer c√≥digo aqui             ‚ïë
‚ïë  apresentado √© EXPRESSAMENTE PROIBIDO e pode resultar em:                   ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  ‚Ä¢ Consequ√™ncias legais severas (Lei 12.737/2012 - Brasil)                 ‚ïë
‚ïë  ‚Ä¢ Pris√£o de 3 a 5 anos                                                    ‚ïë
‚ïë  ‚Ä¢ Multas e indeniza√ß√µes √†s v√≠timas                                        ‚ïë
‚ïë  ‚Ä¢ Responsabiliza√ß√£o civil e criminal                                      ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Este simulador opera em MODO SANDBOX e n√£o pode causar danos reais.       ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(warning)
        
        # Log do aviso
        self._log_security_event(
            "WARNING_DISPLAYED",
            "Aviso de seguran√ßa exibido ao usu√°rio",
            ThreatLevel.MEDIUM,
            "SecuritySystem"
        )
    
    def _log_security_event(self, event_type: str, description: str, 
                          threat_level: ThreatLevel, source: str, details: Dict = None):
        """Registra eventos de seguran√ßa para auditoria"""
        event = SecurityEvent(
            timestamp=datetime.now(),
            event_type=event_type,
            description=description,
            threat_level=threat_level,
            source=source,
            details=details or {}
        )
        self.security_events.append(event)
        logging.info(f"Evento de seguran√ßa: {event_type} - {description}")
    
    def simulate_trojan_behavior(self, simulation_type: SimulationType) -> Dict:
        """
        Simula comportamento de trojan de forma controlada e educacional
        
        Args:
            simulation_type: Tipo de simula√ß√£o a ser executada
            
        Returns:
            Dict com resultados da simula√ß√£o
        """
        if not self.ethical_mode:
            raise ValueError("Simula√ß√£o s√≥ pode ser executada em modo √©tico")
        
        self.simulation_active = True
        start_time = time.time()
        
        print(f"\nüîç Iniciando simula√ß√£o: {simulation_type.value}")
        print("=" * 60)
        
        # Log do in√≠cio da simula√ß√£o
        self._log_security_event(
            "SIMULATION_STARTED",
            f"Simula√ß√£o {simulation_type.value} iniciada",
            ThreatLevel.LOW,
            "SimulationEngine",
            {"type": simulation_type.value}
        )
        
        try:
            if simulation_type == SimulationType.EDUCATIONAL:
                result = self._run_educational_simulation()
            elif simulation_type == SimulationType.DETECTION:
                result = self._run_detection_simulation()
            elif simulation_type == SimulationType.PREVENTION:
                result = self._run_prevention_simulation()
            elif simulation_type == SimulationType.ANALYSIS:
                result = self._run_analysis_simulation()
            else:
                raise ValueError("Tipo de simula√ß√£o inv√°lido")
            
            # Verificar tempo m√°ximo
            elapsed_time = time.time() - start_time
            if elapsed_time > self.max_simulation_time:
                print("‚è∞ Simula√ß√£o interrompida: tempo m√°ximo excedido")
                self._log_security_event(
                    "SIMULATION_TIMEOUT",
                    "Simula√ß√£o interrompida por timeout",
                    ThreatLevel.MEDIUM,
                    "SimulationEngine"
                )
            
            result["execution_time"] = elapsed_time
            result["success"] = True
            
        except Exception as e:
            result = {
                "success": False,
                "error": str(e),
                "execution_time": time.time() - start_time
            }
            logging.error(f"Erro na simula√ß√£o: {e}")
        
        finally:
            self.simulation_active = False
            self._log_security_event(
                "SIMULATION_ENDED",
                f"Simula√ß√£o {simulation_type.value} finalizada",
                ThreatLevel.LOW,
                "SimulationEngine",
                result
            )
        
        return result
    
    def _run_educational_simulation(self) -> Dict:
        """Executa simula√ß√£o educacional sobre trojans"""
        print("\nüìö Simula√ß√£o Educacional - Cavalo de Tr√≥ia")
        print("-" * 50)
        
        # Demonstra√ß√£o de conceitos b√°sicos
        concepts = [
            "1. Disfarce: O trojan se apresenta como software leg√≠timo",
            "2. Execu√ß√£o: Requer a√ß√£o do usu√°rio para ser executado",
            "3. Instala√ß√£o: Instala-se silenciosamente no sistema",
            "4. Ativa√ß√£o: Inicia atividades maliciosas",
            "5. Persist√™ncia: Mant√©m-se ativo no sistema"
        ]
        
        for concept in concepts:
            print(f"   {concept}")
            time.sleep(1)
        
        # Simula√ß√£o de processo de infec√ß√£o
        print("\nü¶† Simulando processo de infec√ß√£o (SANDBOX):")
        infection_steps = [
            "   ‚Ä¢ Arquivo suspeito detectado",
            "   ‚Ä¢ Usu√°rio executa arquivo (simulado)",
            "   ‚Ä¢ Trojan se instala silenciosamente",
            "   ‚Ä¢ Modifica configura√ß√µes do sistema",
            "   ‚Ä¢ Estabelece conex√£o remota",
            "   ‚Ä¢ Inicia coleta de dados"
        ]
        
        for step in infection_steps:
            print(step)
            time.sleep(0.5)
        
        # Demonstra√ß√£o de t√©cnicas de oculta√ß√£o
        print("\nüëÅÔ∏è T√©cnicas de oculta√ß√£o (simuladas):")
        hiding_techniques = [
            "   ‚Ä¢ Rootkit: Oculta√ß√£o profunda no sistema",
            "   ‚Ä¢ Polimorfismo: Mudan√ßa de c√≥digo",
            "   ‚Ä¢ Criptografia: C√≥digo criptografado",
            "   ‚Ä¢ Packing: Compress√£o e ofusca√ß√£o"
        ]
        
        for technique in hiding_techniques:
            print(technique)
            time.sleep(0.5)
        
        return {
            "type": "educational",
            "concepts_demonstrated": len(concepts),
            "infection_steps": len(infection_steps),
            "hiding_techniques": len(hiding_techniques),
            "sandbox_mode": True
        }
    
    def _run_detection_simulation(self) -> Dict:
        """Executa simula√ß√£o de detec√ß√£o de trojans"""
        print("\nüîç Simula√ß√£o de Detec√ß√£o de Trojans")
        print("-" * 50)
        
        # Simular diferentes m√©todos de detec√ß√£o
        detection_methods = [
            ("Antiv√≠rus", "Detec√ß√£o por assinatura", 0.85),
            ("An√°lise Heur√≠stica", "Detec√ß√£o comportamental", 0.70),
            ("Sandbox", "Execu√ß√£o em ambiente isolado", 0.90),
            ("Machine Learning", "IA para detec√ß√£o", 0.80),
            ("An√°lise de Rede", "Monitoramento de tr√°fego", 0.75)
        ]
        
        detected_threats = 0
        total_threats = 10  # Simular 10 amea√ßas
        
        print(f"üéØ Simulando detec√ß√£o de {total_threats} amea√ßas:")
        print()
        
        for method, description, accuracy in detection_methods:
            print(f"   {method}: {description}")
            print(f"   Precis√£o: {accuracy:.0%}")
            
            # Simular detec√ß√£o
            threats_found = int(total_threats * accuracy * random.uniform(0.8, 1.0))
            detected_threats += threats_found
            
            print(f"   Amea√ßas detectadas: {threats_found}")
            print()
            time.sleep(1)
        
        # Simular an√°lise de comportamento suspeito
        print("üî¨ An√°lise comportamental em tempo real:")
        behaviors = [
            "   ‚Ä¢ Acesso n√£o autorizado a arquivos sens√≠veis",
            "   ‚Ä¢ Comunica√ß√£o com servidores suspeitos",
            "   ‚Ä¢ Modifica√ß√£o de configura√ß√µes do sistema",
            "   ‚Ä¢ Tentativas de eleva√ß√£o de privil√©gios",
            "   ‚Ä¢ Cria√ß√£o de processos em segundo plano"
        ]
        
        for behavior in behaviors:
            print(behavior)
            time.sleep(0.3)
        
        detection_rate = detected_threats / total_threats
        print(f"\nüìä Taxa de detec√ß√£o: {detection_rate:.1%}")
        
        return {
            "type": "detection",
            "methods_tested": len(detection_methods),
            "threats_detected": detected_threats,
            "total_threats": total_threats,
            "detection_rate": detection_rate
        }
    
    def _run_prevention_simulation(self) -> Dict:
        """Executa simula√ß√£o de medidas de preven√ß√£o"""
        print("\nüõ°Ô∏è Simula√ß√£o de Medidas de Preven√ß√£o")
        print("-" * 50)
        
        # Simular implementa√ß√£o de medidas de preven√ß√£o
        prevention_measures = [
            ("Firewall", "Bloqueio de conex√µes suspeitas", "Implementado"),
            ("Antiv√≠rus", "Prote√ß√£o em tempo real", "Atualizado"),
            ("Backup", "C√≥pias de seguran√ßa regulares", "Configurado"),
            ("Educa√ß√£o", "Treinamento de usu√°rios", "Em andamento"),
            ("Atualiza√ß√µes", "Patches de seguran√ßa", "Autom√°tico"),
            ("Monitoramento", "An√°lise de rede", "Ativo"),
            ("Criptografia", "Prote√ß√£o de dados", "Habilitado"),
            ("Controle de Acesso", "Autentica√ß√£o multifator", "Configurado")
        ]
        
        implemented_measures = 0
        total_measures = len(prevention_measures)
        
        print("üîß Implementando medidas de preven√ß√£o:")
        print()
        
        for measure, description, status in prevention_measures:
            print(f"   {measure}: {description}")
            print(f"   Status: {status}")
            
            if status in ["Implementado", "Atualizado", "Configurado", "Ativo", "Habilitado"]:
                implemented_measures += 1
                print("   ‚úÖ Prote√ß√£o ativa")
            else:
                print("   ‚ö†Ô∏è  Requer aten√ß√£o")
            
            print()
            time.sleep(0.5)
        
        # Simular teste de penetra√ß√£o
        print("üß™ Testando resist√™ncia a ataques:")
        attack_vectors = [
            "   ‚Ä¢ E-mail de phishing",
            "   ‚Ä¢ Download malicioso",
            "   ‚Ä¢ Explora√ß√£o de vulnerabilidades",
            "   ‚Ä¢ Ataque de for√ßa bruta",
            "   ‚Ä¢ Engenharia social"
        ]
        
        blocked_attacks = 0
        for vector in attack_vectors:
            print(vector)
            # Simular bloqueio baseado nas medidas implementadas
            if random.random() < (implemented_measures / total_measures):
                print("   ‚úÖ Ataque bloqueado")
                blocked_attacks += 1
            else:
                print("   ‚ùå Ataque bem-sucedido")
            time.sleep(0.3)
        
        protection_rate = blocked_attacks / len(attack_vectors)
        print(f"\nüìä Taxa de prote√ß√£o: {protection_rate:.1%}")
        
        return {
            "type": "prevention",
            "measures_implemented": implemented_measures,
            "total_measures": total_measures,
            "attacks_blocked": blocked_attacks,
            "total_attacks": len(attack_vectors),
            "protection_rate": protection_rate
        }
    
    def _run_analysis_simulation(self) -> Dict:
        """Executa simula√ß√£o de an√°lise de trojans"""
        print("\nüî¨ Simula√ß√£o de An√°lise de Trojans")
        print("-" * 50)
        
        # Simular an√°lise de amostra de trojan
        print("üìã Analisando amostra de trojan (simulada):")
        print()
        
        # Caracter√≠sticas do trojan simulado
        trojan_characteristics = {
            "Tamanho": "2.3 MB",
            "Tipo": "Banking Trojan",
            "T√©cnicas": ["Keylogging", "Screen Capture", "Data Exfiltration"],
            "Comunica√ß√£o": "C&C Server: 192.168.1.100:8080",
            "Persistence": "Registry Modification",
            "Evasion": "Code Obfuscation"
        }
        
        for characteristic, value in trojan_characteristics.items():
            print(f"   {characteristic}: {value}")
            time.sleep(0.3)
        
        # Simular an√°lise est√°tica
        print("\nüîç An√°lise est√°tica:")
        static_analysis = [
            "   ‚Ä¢ Strings suspeitas encontradas",
            "   ‚Ä¢ APIs maliciosas identificadas",
            "   ‚Ä¢ Criptografia de dados detectada",
            "   ‚Ä¢ Oculta√ß√£o de c√≥digo confirmada",
            "   ‚Ä¢ Assinatura de malware conhecido"
        ]
        
        for analysis in static_analysis:
            print(analysis)
            time.sleep(0.3)
        
        # Simular an√°lise din√¢mica
        print("\n‚ö° An√°lise din√¢mica (sandbox):")
        dynamic_analysis = [
            "   ‚Ä¢ Modifica√ß√£o de arquivos do sistema",
            "   ‚Ä¢ Cria√ß√£o de processos suspeitos",
            "   ‚Ä¢ Comunica√ß√£o de rede maliciosa",
            "   ‚Ä¢ Tentativas de persist√™ncia",
            "   ‚Ä¢ Coleta de dados sens√≠veis"
        ]
        
        for analysis in dynamic_analysis:
            print(analysis)
            time.sleep(0.3)
        
        # Simular classifica√ß√£o de amea√ßa
        threat_score = random.randint(70, 95)
        print(f"\n‚ö†Ô∏è  Pontua√ß√£o de amea√ßa: {threat_score}/100")
        
        if threat_score >= 90:
            threat_level = "CR√çTICA"
        elif threat_score >= 70:
            threat_level = "ALTA"
        elif threat_score >= 50:
            threat_level = "M√âDIA"
        else:
            threat_level = "BAIXA"
        
        print(f"   N√≠vel de amea√ßa: {threat_level}")
        
        return {
            "type": "analysis",
            "characteristics_analyzed": len(trojan_characteristics),
            "static_findings": len(static_analysis),
            "dynamic_findings": len(dynamic_analysis),
            "threat_score": threat_score,
            "threat_level": threat_level
        }
    
    def generate_security_report(self) -> str:
        """Gera relat√≥rio de seguran√ßa baseado nas simula√ß√µes"""
        if not self.security_events:
            return "Nenhum evento de seguran√ßa registrado."
        
        report = []
        report.append("=" * 60)
        report.append("RELAT√ìRIO DE SEGURAN√áA - SIMULADOR DE CAVALO DE TR√ìIA")
        report.append("=" * 60)
        report.append(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        report.append(f"Total de eventos: {len(self.security_events)}")
        report.append("")
        
        # Agrupar eventos por tipo
        event_types = {}
        for event in self.security_events:
            if event.event_type not in event_types:
                event_types[event.event_type] = []
            event_types[event.event_type].append(event)
        
        for event_type, events in event_types.items():
            report.append(f"üìä {event_type}:")
            for event in events:
                report.append(f"   ‚Ä¢ {event.timestamp.strftime('%H:%M:%S')} - {event.description}")
            report.append("")
        
        # Estat√≠sticas de amea√ßas
        threat_levels = {}
        for event in self.security_events:
            level = event.threat_level.value
            threat_levels[level] = threat_levels.get(level, 0) + 1
        
        if threat_levels:
            report.append("üìà Estat√≠sticas de N√≠veis de Amea√ßa:")
            for level, count in threat_levels.items():
                report.append(f"   ‚Ä¢ {level}: {count} eventos")
            report.append("")
        
        report.append("=" * 60)
        report.append("FIM DO RELAT√ìRIO")
        report.append("=" * 60)
        
        return "\n".join(report)
    
    def export_simulation_data(self, filename: str = None) -> str:
        """Exporta dados da simula√ß√£o para arquivo JSON"""
        if filename is None:
            filename = f"trojan_simulation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        data = {
            "simulation_info": {
                "timestamp": datetime.now().isoformat(),
                "total_events": len(self.security_events),
                "simulation_active": self.simulation_active,
                "sandbox_mode": self.sandbox_mode,
                "ethical_mode": self.ethical_mode
            },
            "security_events": [
                {
                    "timestamp": event.timestamp.isoformat(),
                    "event_type": event.event_type,
                    "description": event.description,
                    "threat_level": event.threat_level.value,
                    "source": event.source,
                    "details": event.details
                }
                for event in self.security_events
            ],
            "detection_systems": self.detection_systems,
            "prevention_measures": self.prevention_measures
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            logging.info(f"Dados da simula√ß√£o exportados para: {filename}")
            return filename
        except Exception as e:
            logging.error(f"Erro ao exportar dados: {e}")
            raise

def main():
    """Fun√ß√£o principal do simulador"""
    print("üê¥ Simulador Educacional de Cavalo de Tr√≥ia")
    print("   Criptografia e Seguran√ßa - Atitus Educa√ß√£o")
    print("   Integrantes: Diogo Chaves, Gabriel Vanz, Vitor Badin")
    print()
    
    # Inicializar simulador
    simulator = TrojanSimulator()
    
    # Exibir aviso de seguran√ßa
    simulator.display_warning()
    
    # Menu principal
    while True:
        print("\n" + "=" * 60)
        print("MENU PRINCIPAL - SIMULADOR EDUCACIONAL")
        print("=" * 60)
        print("1. Simula√ß√£o Educacional")
        print("2. Simula√ß√£o de Detec√ß√£o")
        print("3. Simula√ß√£o de Preven√ß√£o")
        print("4. Simula√ß√£o de An√°lise")
        print("5. Gerar Relat√≥rio de Seguran√ßa")
        print("6. Exportar Dados da Simula√ß√£o")
        print("7. Sair")
        print("=" * 60)
        
        try:
            choice = input("\nEscolha uma op√ß√£o (1-7): ").strip()
            
            if choice == "1":
                result = simulator.simulate_trojan_behavior(SimulationType.EDUCATIONAL)
                print(f"\n‚úÖ Simula√ß√£o educacional conclu√≠da em {result['execution_time']:.2f}s")
                
            elif choice == "2":
                result = simulator.simulate_trojan_behavior(SimulationType.DETECTION)
                print(f"\n‚úÖ Simula√ß√£o de detec√ß√£o conclu√≠da em {result['execution_time']:.2f}s")
                
            elif choice == "3":
                result = simulator.simulate_trojan_behavior(SimulationType.PREVENTION)
                print(f"\n‚úÖ Simula√ß√£o de preven√ß√£o conclu√≠da em {result['execution_time']:.2f}s")
                
            elif choice == "4":
                result = simulator.simulate_trojan_behavior(SimulationType.ANALYSIS)
                print(f"\n‚úÖ Simula√ß√£o de an√°lise conclu√≠da em {result['execution_time']:.2f}s")
                
            elif choice == "5":
                report = simulator.generate_security_report()
                print("\n" + report)
                
            elif choice == "6":
                filename = simulator.export_simulation_data()
                print(f"\n‚úÖ Dados exportados para: {filename}")
                
            elif choice == "7":
                print("\nüëã Encerrando simulador...")
                print("Obrigado por usar o Simulador Educacional de Cavalo de Tr√≥ia!")
                break
                
            else:
                print("\n‚ùå Op√ß√£o inv√°lida. Tente novamente.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Simulador interrompido pelo usu√°rio.")
            break
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")
            logging.error(f"Erro no menu principal: {e}")

if __name__ == "__main__":
    main()
