#!/usr/bin/env python3
"""
M√≥dulos Educacionais para Simula√ß√£o de Cavalo de Tr√≥ia
=====================================================

Este m√≥dulo cont√©m componentes educacionais espec√≠ficos para demonstrar
conceitos de seguran√ßa cibern√©tica relacionados a trojans.

Autor: Equipe de Criptografia e Seguran√ßa - Atitus Educa√ß√£o
Integrantes: Diogo Chaves, Gabriel Vanz, Vitor Badin
Ano: 2024
"""

import random
import time
from typing import List, Dict, Tuple
from dataclasses import dataclass
from enum import Enum

class TrojanFamily(Enum):
    """Fam√≠lias de trojans para classifica√ß√£o educacional"""
    BANKING = "Banking Trojan"
    RAT = "Remote Access Trojan"
    KEYLOGGER = "Keylogger"
    BACKDOOR = "Backdoor"
    DOWNLOADER = "Downloader"
    RANSOMWARE = "Ransomware"

class AttackVector(Enum):
    """Vetores de ataque para simula√ß√£o"""
    EMAIL = "E-mail"
    DOWNLOAD = "Download"
    USB = "Dispositivo USB"
    WEBSITE = "Site Web"
    SOCIAL = "Engenharia Social"
    NETWORK = "Rede"

@dataclass
class TrojanExample:
    """Exemplo de trojan para fins educacionais"""
    name: str
    family: TrojanFamily
    description: str
    impact: str
    year: int
    techniques: List[str]
    detection_difficulty: int  # 1-10

class TrojanEducationModules:
    """M√≥dulos educacionais para simula√ß√£o de trojans"""
    
    def __init__(self):
        self.trojan_examples = self._load_trojan_examples()
        self.attack_scenarios = self._load_attack_scenarios()
        self.defense_strategies = self._load_defense_strategies()
    
    def _load_trojan_examples(self) -> List[TrojanExample]:
        """Carrega exemplos reais de trojans para fins educacionais"""
        return [
            TrojanExample(
                name="Zeus",
                family=TrojanFamily.BANKING,
                description="Troyan banc√°rio que rouba credenciais financeiras",
                impact="$100+ milh√µes roubados",
                year=2007,
                techniques=["Keylogging", "Form Grabbing", "Web Injection"],
                detection_difficulty=8
            ),
            TrojanExample(
                name="Emotet",
                family=TrojanFamily.DOWNLOADER,
                description="Evoluiu de troyan banc√°rio para plataforma de distribui√ß√£o",
                impact="1.6+ milh√µes de v√≠timas",
                year=2014,
                techniques=["Modular Design", "Email Propagation", "C&C Communication"],
                detection_difficulty=9
            ),
            TrojanExample(
                name="TrickBot",
                family=TrojanFamily.BANKING,
                description="Troyan banc√°rio modular usado para distribuir ransomware",
                impact="Ainda ativo globalmente",
                year=2016,
                techniques=["Modular Architecture", "Lateral Movement", "Credential Harvesting"],
                detection_difficulty=9
            ),
            TrojanExample(
                name="NetBus",
                family=TrojanFamily.RAT,
                description="Um dos primeiros RATs amplamente conhecidos",
                impact="Demonstrou vulnerabilidades de RAT",
                year=1998,
                techniques=["Remote Control", "File Transfer", "Screen Capture"],
                detection_difficulty=3
            ),
            TrojanExample(
                name="Sub7",
                family=TrojanFamily.RAT,
                description="Remote Access Trojan popular na d√©cada de 2000",
                impact="Milhares de sistemas comprometidos",
                year=1999,
                techniques=["Remote Control", "Keylogging", "File Management"],
                detection_difficulty=4
            )
        ]
    
    def _load_attack_scenarios(self) -> List[Dict]:
        """Carrega cen√°rios de ataque para simula√ß√£o"""
        return [
            {
                "name": "Phishing por E-mail",
                "vector": AttackVector.EMAIL,
                "description": "E-mail falso com anexo malicioso",
                "steps": [
                    "Cria√ß√£o de e-mail falso",
                    "Anexo de arquivo trojan",
                    "Envio para lista de contatos",
                    "Usu√°rio executa anexo",
                    "Trojan se instala silenciosamente"
                ],
                "prevention": [
                    "Verificar remetente",
                    "N√£o abrir anexos suspeitos",
                    "Usar filtros de spam",
                    "Educar usu√°rios"
                ]
            },
            {
                "name": "Download Malicioso",
                "vector": AttackVector.DOWNLOAD,
                "description": "Site falso oferecendo software leg√≠timo",
                "steps": [
                    "Cria√ß√£o de site falso",
                    "Oferta de software gratuito",
                    "Download de arquivo infectado",
                    "Execu√ß√£o pelo usu√°rio",
                    "Instala√ß√£o do trojan"
                ],
                "prevention": [
                    "Verificar fonte do download",
                    "Usar sites oficiais",
                    "Verificar assinatura digital",
                    "Antiv√≠rus atualizado"
                ]
            },
            {
                "name": "USB Malicioso",
                "vector": AttackVector.USB,
                "description": "Dispositivo USB abandonado com trojan",
                "steps": [
                    "Prepara√ß√£o de USB infectado",
                    "Abandono em local p√∫blico",
                    "Usu√°rio conecta USB",
                    "Execu√ß√£o autom√°tica",
                    "Infec√ß√£o do sistema"
                ],
                "prevention": [
                    "Desabilitar auto-executa",
                    "Verificar antes de usar",
                    "N√£o usar USBs desconhecidos",
                    "Escaneamento com antiv√≠rus"
                ]
            }
        ]
    
    def _load_defense_strategies(self) -> List[Dict]:
        """Carrega estrat√©gias de defesa"""
        return [
            {
                "category": "Preven√ß√£o",
                "strategies": [
                    "Educa√ß√£o e conscientiza√ß√£o dos usu√°rios",
                    "Pol√≠ticas de seguran√ßa robustas",
                    "Controle de acesso baseado em fun√ß√µes",
                    "Backup regular e testado",
                    "Atualiza√ß√µes de seguran√ßa autom√°ticas"
                ]
            },
            {
                "category": "Detec√ß√£o",
                "strategies": [
                    "Antiv√≠rus com detec√ß√£o heur√≠stica",
                    "Sistemas de detec√ß√£o de intrus√£o (IDS)",
                    "Monitoramento de rede em tempo real",
                    "An√°lise comportamental com IA",
                    "Sandbox para an√°lise de arquivos"
                ]
            },
            {
                "category": "Resposta",
                "strategies": [
                    "Plano de resposta a incidentes",
                    "Isolamento de sistemas infectados",
                    "An√°lise forense digital",
                    "Comunica√ß√£o com stakeholders",
                    "Recupera√ß√£o de dados e sistemas"
                ]
            }
        ]
    
    def demonstrate_trojan_lifecycle(self) -> None:
        """Demonstra o ciclo de vida de um trojan"""
        print("\nüîÑ CICLO DE VIDA DE UM CAVALO DE TR√ìIA")
        print("=" * 50)
        
        lifecycle_stages = [
            ("1. Desenvolvimento", "Cria√ß√£o do c√≥digo malicioso"),
            ("2. Distribui√ß√£o", "Envio via e-mail, sites, USBs"),
            ("3. Execu√ß√£o", "Usu√°rio executa o arquivo"),
            ("4. Instala√ß√£o", "Trojan se instala silenciosamente"),
            ("5. Ativa√ß√£o", "Inicia atividades maliciosas"),
            ("6. Persist√™ncia", "Mant√©m-se ativo no sistema"),
            ("7. Comunica√ß√£o", "Conecta-se ao servidor C&C"),
            ("8. Coleta", "Rouba dados e informa√ß√µes"),
            ("9. Propaga√ß√£o", "Tenta infectar outros sistemas"),
            ("10. Oculta√ß√£o", "Esconde-se de ferramentas de seguran√ßa")
        ]
        
        for stage, description in lifecycle_stages:
            print(f"   {stage}: {description}")
            time.sleep(0.5)
    
    def demonstrate_detection_techniques(self) -> None:
        """Demonstra t√©cnicas de detec√ß√£o de trojans"""
        print("\nüîç T√âCNICAS DE DETEC√á√ÉO DE TROJANS")
        print("=" * 50)
        
        detection_techniques = [
            {
                "name": "Detec√ß√£o por Assinatura",
                "description": "Compara arquivos com banco de assinaturas conhecidas",
                "pros": ["R√°pida", "Eficaz para malware conhecido"],
                "cons": ["N√£o detecta malware novo", "F√°cil de evadir"]
            },
            {
                "name": "An√°lise Heur√≠stica",
                "description": "Analisa comportamento suspeito do c√≥digo",
                "pros": ["Detecta malware novo", "An√°lise comportamental"],
                "cons": ["Falsos positivos", "Mais lenta"]
            },
            {
                "name": "Sandboxing",
                "description": "Executa arquivos em ambiente isolado",
                "pros": ["Seguro", "An√°lise completa"],
                "cons": ["Recursos intensivos", "Evas√£o avan√ßada"]
            },
            {
                "name": "Machine Learning",
                "description": "IA para detectar padr√µes maliciosos",
                "pros": ["Adapt√°vel", "Detec√ß√£o avan√ßada"],
                "cons": ["Complexa", "Requer treinamento"]
            }
        ]
        
        for technique in detection_techniques:
            print(f"\n   üìä {technique['name']}")
            print(f"      Descri√ß√£o: {technique['description']}")
            print(f"      ‚úÖ Vantagens: {', '.join(technique['pros'])}")
            print(f"      ‚ùå Desvantagens: {', '.join(technique['cons'])}")
            time.sleep(1)
    
    def demonstrate_prevention_measures(self) -> None:
        """Demonstra medidas de preven√ß√£o"""
        print("\nüõ°Ô∏è MEDIDAS DE PREVEN√á√ÉO")
        print("=" * 50)
        
        for category in self.defense_strategies:
            print(f"\n   üìã {category['category']}:")
            for strategy in category['strategies']:
                print(f"      ‚Ä¢ {strategy}")
                time.sleep(0.3)
    
    def simulate_attack_scenario(self, scenario_index: int) -> Dict:
        """Simula um cen√°rio de ataque espec√≠fico"""
        if scenario_index >= len(self.attack_scenarios):
            raise ValueError("√çndice de cen√°rio inv√°lido")
        
        scenario = self.attack_scenarios[scenario_index]
        
        print(f"\nüéØ SIMULANDO: {scenario['name']}")
        print("=" * 50)
        print(f"Vetor: {scenario['vector'].value}")
        print(f"Descri√ß√£o: {scenario['description']}")
        print()
        
        print("üìã Etapas do ataque:")
        for i, step in enumerate(scenario['steps'], 1):
            print(f"   {i}. {step}")
            time.sleep(0.5)
        
        print("\nüõ°Ô∏è Medidas de preven√ß√£o:")
        for i, prevention in enumerate(scenario['prevention'], 1):
            print(f"   {i}. {prevention}")
            time.sleep(0.3)
        
        return {
            "scenario": scenario['name'],
            "vector": scenario['vector'].value,
            "steps_count": len(scenario['steps']),
            "prevention_count": len(scenario['prevention'])
        }
    
    def analyze_trojan_example(self, example_index: int) -> Dict:
        """Analisa um exemplo espec√≠fico de trojan"""
        if example_index >= len(self.trojan_examples):
            raise ValueError("√çndice de exemplo inv√°lido")
        
        example = self.trojan_examples[example_index]
        
        print(f"\nüî¨ AN√ÅLISE: {example.name}")
        print("=" * 50)
        print(f"Fam√≠lia: {example.family.value}")
        print(f"Descri√ß√£o: {example.description}")
        print(f"Impacto: {example.impact}")
        print(f"Ano: {example.year}")
        print(f"Dificuldade de Detec√ß√£o: {example.detection_difficulty}/10")
        print()
        
        print("üîß T√©cnicas utilizadas:")
        for technique in example.techniques:
            print(f"   ‚Ä¢ {technique}")
            time.sleep(0.3)
        
        # Simular an√°lise de risco
        risk_level = "ALTO" if example.detection_difficulty >= 8 else "M√âDIO" if example.detection_difficulty >= 5 else "BAIXO"
        print(f"\n‚ö†Ô∏è  N√≠vel de Risco: {risk_level}")
        
        return {
            "name": example.name,
            "family": example.family.value,
            "detection_difficulty": example.detection_difficulty,
            "techniques_count": len(example.techniques),
            "risk_level": risk_level
        }
    
    def generate_educational_quiz(self) -> List[Dict]:
        """Gera um quiz educacional sobre trojans"""
        questions = [
            {
                "question": "O que √© um Cavalo de Tr√≥ia (Trojan)?",
                "options": [
                    "Um v√≠rus que se replica automaticamente",
                    "Malware que se disfar√ßa como software leg√≠timo",
                    "Um tipo de firewall",
                    "Um sistema de backup"
                ],
                "correct": 1,
                "explanation": "Um trojan √© um tipo de malware que se disfar√ßa como software leg√≠timo para enganar usu√°rios."
            },
            {
                "question": "Como os trojans se propagam?",
                "options": [
                    "Automaticamente como v√≠rus",
                    "Apenas atrav√©s de e-mail",
                    "Dependem da a√ß√£o do usu√°rio",
                    "S√≥ em redes locais"
                ],
                "correct": 2,
                "explanation": "Diferentemente de v√≠rus, os trojans dependem da a√ß√£o do usu√°rio para serem executados."
            },
            {
                "question": "Qual √© a melhor forma de prevenir infec√ß√µes por trojans?",
                "options": [
                    "Usar apenas antiv√≠rus",
                    "Educar usu√°rios e implementar m√∫ltiplas camadas de seguran√ßa",
                    "Desconectar da internet",
                    "Usar apenas software pirata"
                ],
                "correct": 1,
                "explanation": "A melhor preven√ß√£o combina educa√ß√£o do usu√°rio com m√∫ltiplas camadas de seguran√ßa."
            },
            {
                "question": "O que √© sandboxing?",
                "options": [
                    "Um tipo de trojan",
                    "Execu√ß√£o de arquivos em ambiente isolado",
                    "Um m√©todo de criptografia",
                    "Uma t√©cnica de backup"
                ],
                "correct": 1,
                "explanation": "Sandboxing √© a execu√ß√£o de arquivos em um ambiente isolado e controlado para an√°lise."
            },
            {
                "question": "Qual lei brasileira trata de crimes cibern√©ticos?",
                "options": [
                    "Lei 8.069/1990",
                    "Lei 12.737/2012",
                    "Lei 13.709/2018",
                    "Lei 14.129/2021"
                ],
                "correct": 1,
                "explanation": "A Lei 12.737/2012, conhecida como Lei de Crimes Cibern√©ticos, estabelece as penalidades para crimes cibern√©ticos no Brasil."
            }
        ]
        
        return questions
    
    def run_educational_quiz(self) -> Dict:
        """Executa o quiz educacional"""
        questions = self.generate_educational_quiz()
        correct_answers = 0
        total_questions = len(questions)
        
        print("\nüìö QUIZ EDUCACIONAL - CAVALO DE TR√ìIA")
        print("=" * 50)
        print("Responda as perguntas para testar seus conhecimentos!")
        print()
        
        for i, q in enumerate(questions, 1):
            print(f"Pergunta {i}/{total_questions}:")
            print(f"   {q['question']}")
            print()
            
            for j, option in enumerate(q['options']):
                print(f"   {j + 1}. {option}")
            
            while True:
                try:
                    answer = int(input("\nSua resposta (1-4): ")) - 1
                    if 0 <= answer <= 3:
                        break
                    else:
                        print("‚ùå Resposta inv√°lida. Digite 1, 2, 3 ou 4.")
                except ValueError:
                    print("‚ùå Resposta inv√°lida. Digite um n√∫mero.")
            
            if answer == q['correct']:
                print("‚úÖ Correto!")
                correct_answers += 1
            else:
                print("‚ùå Incorreto!")
            
            print(f"   Explica√ß√£o: {q['explanation']}")
            print("-" * 50)
            time.sleep(1)
        
        score = (correct_answers / total_questions) * 100
        
        print(f"\nüìä RESULTADO DO QUIZ")
        print("=" * 30)
        print(f"Respostas corretas: {correct_answers}/{total_questions}")
        print(f"Pontua√ß√£o: {score:.1f}%")
        
        if score >= 80:
            print("üèÜ Excelente! Voc√™ tem um bom conhecimento sobre trojans!")
        elif score >= 60:
            print("üëç Bom! Continue estudando para melhorar ainda mais!")
        else:
            print("üìö Estude mais sobre seguran√ßa cibern√©tica para se proteger melhor!")
        
        return {
            "total_questions": total_questions,
            "correct_answers": correct_answers,
            "score": score,
            "passed": score >= 60
        }

def main():
    """Fun√ß√£o principal para testar os m√≥dulos educacionais"""
    print("üìö M√≥dulos Educacionais - Cavalo de Tr√≥ia")
    print("=" * 50)
    
    modules = TrojanEducationModules()
    
    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1. Demonstrar ciclo de vida de trojan")
        print("2. Demonstrar t√©cnicas de detec√ß√£o")
        print("3. Demonstrar medidas de preven√ß√£o")
        print("4. Simular cen√°rio de ataque")
        print("5. Analisar exemplo de trojan")
        print("6. Executar quiz educacional")
        print("7. Sair")
        
        choice = input("\nOp√ß√£o: ").strip()
        
        try:
            if choice == "1":
                modules.demonstrate_trojan_lifecycle()
            elif choice == "2":
                modules.demonstrate_detection_techniques()
            elif choice == "3":
                modules.demonstrate_prevention_measures()
            elif choice == "4":
                print("\nCen√°rios dispon√≠veis:")
                for i, scenario in enumerate(modules.attack_scenarios):
                    print(f"   {i}. {scenario['name']}")
                scenario_idx = int(input("\nEscolha um cen√°rio: "))
                modules.simulate_attack_scenario(scenario_idx)
            elif choice == "5":
                print("\nExemplos dispon√≠veis:")
                for i, example in enumerate(modules.trojan_examples):
                    print(f"   {i}. {example.name}")
                example_idx = int(input("\nEscolha um exemplo: "))
                modules.analyze_trojan_example(example_idx)
            elif choice == "6":
                modules.run_educational_quiz()
            elif choice == "7":
                print("üëã Encerrando m√≥dulos educacionais...")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida.")
        except (ValueError, IndexError) as e:
            print(f"‚ùå Erro: {e}")
        except KeyboardInterrupt:
            print("\nüëã Encerrando...")
            break

if __name__ == "__main__":
    main()
